
<<<<<<< HEAD
class Class
  
  def attr_accessor_with_history(attr_name)
    attr_name = attr_name.to_s # make sure it's a string
    #attr_reader attr_name # create the attribute's getter
    #attr_reader attr_name+"_history" # create bar_history getter
    
    attr_accessor attr_name # create the attribute's setter
    attr_accessor attr_name+"_history" # create bar_history setter
    
    class_eval %Q{
      def #{attr_name}=(val)
       
			if(!defined?(@#{attr_name}_history))
				@#{attr_name}_history = [@#{attr_name}]
			end

			@#{attr_name} = val
			@#{attr_name}_history << val
      end
    }
  end
end

class Foo
  attr_accessor_with_history :bar
end

f = Foo.new # => #<Foo:0x127e678>
f.bar = 3 # => 3
f.bar = :wowzo # => :wowzo
f.bar = 'boo!' # => 'boo!'
puts f.bar_history # => [nil, 3, :wowzo, 'boo!']

f = Foo.new
f.bar = 1
f.bar = 2
puts f.bar_history # => if your code works, should be [nil,1,2]
=======

require 'debugger'              # optional, may be helpful
require 'open-uri'              # allows open('http://...') to return body
require 'cgi'                   # for escaping URIs
require 'nokogiri'              # XML parser
require 'active_model'          # for validations

class OracleOfBacon

  class InvalidError < RuntimeError ; end
  class NetworkError < RuntimeError ; end
  class InvalidKeyError < RuntimeError ; end

  attr_accessor :from, :to
  attr_reader :api_key, :response, :uri
  
  include ActiveModel::Validations
  validates_presence_of :from
  validates_presence_of :to
  validates_presence_of :api_key
  validate :from_does_not_equal_to
	 

  def from_does_not_equal_to
    errors.add(:to, "Must have different To and Froms") unless
    	@to != @from
    puts "in def from_does..."
    puts @from 
    puts @to
     
  end

  def initialize(api_key='')
 		if @from == nil then @from = 'Kevin Bacon' end	
		if @to == nil then @to = @from end
		
		puts @to
		puts @from
  end

  def find_connections
    make_uri_from_arguments
    begin
      xml = URI.parse(uri).read
    rescue Timeout::Error, Errno::EINVAL, Errno::ECONNRESET, EOFError,
      Net::HTTPBadResponse, Net::HTTPHeaderSyntaxError,
      Net::ProtocolError => e
      # convert all of these into a generic OracleOfBacon::NetworkError,
      #  but keep the original error message
      # your code here
    end
    # your code here: create the OracleOfBacon::Response object
  end

  def make_uri_from_arguments
    # your code here: set the @uri attribute to properly-escaped URI
    #   constructed from the @from, @to, @api_key arguments
  end
      
  class Response
    attr_reader :type, :data
    # create a Response object from a string of XML markup.
    def initialize(xml)
      @doc = Nokogiri::XML(xml)
      parse_response
    end
>>>>>>> a56338abd41d0f925bd41ec95e07ac5ba4ff49af

    private

    def parse_response
      if ! @doc.xpath('/error').empty?
        parse_error_response
      # your code here: 'elsif' clauses to handle other responses
      # for responses not matching the 3 basic types, the Response
      # object should have type 'unknown' and data 'unknown response'         
      end
    end
    def parse_error_response
      @type = :error
      @data = 'Unauthorized access'
    end
  end
end


falcon = OracleOfBacon.new()
falcon.to = 'Carrie Fisher'
falcon.from = 'Carrie Fisher'

puts falcon.to
puts falcon.from
falcon.from_does_not_equal_to
puts falcon.errors.full_messages
